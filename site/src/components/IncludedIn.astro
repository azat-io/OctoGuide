---
import type { ConfigName } from "../../../src/types/core";
import { allRules } from "../../../src/rules/all.js";
import { configEmojis } from "../data/configEmojis";

interface Props {
	rule: string;
}

const { rule: ruleName } = Astro.props;
const rule = allRules.find((r) => r.about.name === ruleName);

if (!rule) {
	throw new Error(`Rule ${ruleName} not found`);
}

function getRuleConfigs(config: ConfigName) {
	const configs: ConfigName[] = [config];
	if (config === "recommended") {
		configs.push("strict");
	}
	return configs;
}

const configs = getRuleConfigs(rule.about.config);
---

<blockquote>
	Included in {configs.length === 1 ? "config:" : "configs:"}
	{
		configs.map((config, i) => (
			<>
				{configEmojis[config]}&nbsp;{config}
				{i < configs.length - 1 ? ", " : ""}
			</>
		))
	}
</blockquote>
